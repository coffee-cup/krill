# Scopes

x = 1

foo = a -> {
   x = 4
   assert x 4

   x
}

bar = _ -> {
  x = 100
  y = 200

  car = _ -> x + y
  car
}

car = bar ()
assert (car ()) 300

assert (foo ()) 4
assert x 1

# lists

assert (length []) 0
assert (length [1,2,3]) 3
assert (length [1]) 1

square = x -> x * x
assert (map square [1,2,3]) [1,4,9]
assert (map square [1..10]) [1,4,9,16,25,36,49,64,81,100]
assert (map square [1..10]) [1,4,9,16,25,36,49,64,81,100]

assert (flatten [[], [1,2],3]) [1,2,3]

assert (sum [1,2,3]) 6
assert (foldl (acc curr -> acc - curr) 0 [1,2,3]) (-6)
assert (foldr (acc curr -> acc - curr) 0 [1,2,3]) 2

even = x -> x % 2 == 0
odd = x -> !(even x)

assert (filter even $ map square [1..10]) [4,16,36,64,100]
assert (filter odd $ map square [1..10]) [1,9,25,49,81]

assert (intersperse "," ["hello", "world"]) ["hello",",","world"]
assert (intersperse 0 [1,2,3]) [1,0,2,0,3]
assert (intersperse "" []) []

assert (join " " ["hello", "world"]) "hello world"
assert (join "" ["hello", "world"]) "helloworld"
assert (join "" []) ""

# strings

assert (split "" "hello") ['h', 'e', 'l', 'l', 'o']
assert (split "," "this,is,some,text") ["this", "is", "some", "text"]
assert (trim "     \n\n\n hello world  \n ") "hello world"

# to conversions

assert (toString 3) "3"
assert (toNumber "100") 100
assert ((toString . toNumber) "100") "100"

assert (charToCode 'a') 97
assert (codeToChar $ 97) 'a'

# is checks

assert (isList []) true
assert (isNumber 0) true
assert (isString "") true
assert (isBool true) true
assert (isAtom :hello) true

assert (isList 0) false
assert (isNumber []) false
assert (isString 0) false
assert (isBool 0) false
assert (isAtom 0) false

# math

assert (sin 0) 0
assert (cos 0) 1

assert (pow 2 3) 8
assert (root 3 8) 2
assert (sqrt 25) 5
assert (floor 2.6) 2
assert (ceil 2.2) 3

# misc

assert (isString $ date ()) true
assert (isString $ time ()) true

assert (min 1 2) 1
assert (max 1 2) 2

assert (isString $ date ()) true
assert (isString $ time ()) true

print $ "ğŸš€ Tests Passed."

